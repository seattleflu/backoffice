#!/usr/bin/env python3
"""
Join the REDCap NDJSON data with an ID3C CSV.
Parses the joined data to make it suitable for UW Lab Med's return of results
portal.
"""
import sys
import argparse
import pandas as pd


def parse_redcap(redcap_file) -> pd.DataFrame:
    """
    Reads in data from a given *redcap_file*. Returns a pandas.DataFrame
    prepared in the specifications of UW Lab Med's return of results portal.
    """
    redcap_data = (
        pd.read_json(redcap_file, lines = True, dtype = False, convert_dates = False)
        .astype("string")
        .pipe(trim_whitespace)
        .replace({"": pd.NA})
        .astype("string")
        .rename(columns={'birthday': 'birth_date'}))

    participant_name = lambda row: f"{row['participant_first_name']} {row['participant_last_name']}"
    redcap_data['pat_name'] = redcap_data.apply(participant_name, axis='columns')

    # This invariant protects our filename assumptions.
    assert all(redcap_data['birth_date'].str.match(r"^\d{4}-\d{2}-\d{2}$").dropna())

    # Normalize all barcode fields upfront.
    barcode_fields = {
        "return_utm_barcode",
        "utm_tube_barcode_2",
        "reenter_barcode",
        "reenter_barcode_2"}

    for barcode_field in barcode_fields:
        if barcode_field in redcap_data:
            redcap_data[barcode_field] = normalize_barcode(redcap_data[barcode_field])
        else:
            redcap_data[barcode_field] = pd.Series(dtype = "string")

    # For our at-home mailed kits, return_utm_barcode is the most reliable.  It
    # is scanned during unboxing of returned kits after confirming the
    # participant's identity.  At-home kits also have a utm_tube_barcode_2
    # which is manually entered by the participant; it is double-entered into
    # reenter_barcode.  We *do not* use participant-entered barcodes for mailed
    # kits, so those get pre-emptively blanked.
    #
    # For our kiosk/in-person collections, utm_tube_barcode_2 is scanned by
    # staff.  If scanning doesn't work, then a manually-entered barcode is in
    # reenter_barcode; it is double-entered into reenter_barcode_2.
    collection_via = redcap_data["project_collection_via"]

    redcap_data.loc[collection_via != "kiosk", "utm_tube_barcode_2"] = pd.NA
    redcap_data.loc[collection_via != "kiosk", "reenter_barcode"]    = pd.NA

    return_utm_barcode = redcap_data["return_utm_barcode"]
    utm_tube_barcode_2 = redcap_data["utm_tube_barcode_2"]
    reenter_barcode    = redcap_data["reenter_barcode"]
    reenter_barcode_2  = redcap_data["reenter_barcode_2"]

    # Censor manually-entered barcodes which don't match.
    mismatched = (
          (reenter_barcode.notna() | reenter_barcode_2.notna())
        & reenter_barcode.ne(reenter_barcode_2, fill_value = ""))

    if not mismatched[mismatched].empty:
        print(f"Censoring {mismatched[mismatched].size:,} manually-entered barcodes which do not match each other", file = sys.stderr)

    redcap_data.loc[mismatched, "reenter_barcode"]   = pd.NA
    redcap_data.loc[mismatched, "reenter_barcode_2"] = pd.NA

    assert all(reenter_barcode.eq(reenter_barcode_2, fill_value = "").dropna())

    # Use best barcode available depending on the project.
    #
    # Note that combine_first() only applies for NA values (e.g. not empty
    # strings); the NA-handling above is important.
    mail_barcodes  = return_utm_barcode
    kiosk_barcodes = utm_tube_barcode_2.combine_first(reenter_barcode)

    barcodes = kiosk_barcodes.where(collection_via == "kiosk", mail_barcodes)

    # There should be absolutely no duplicates, but REDCap can't enforce this,
    # so warn and drop any that we find.
    dups = barcodes.loc[barcodes.duplicated(keep = False)].dropna()

    if not dups.empty:
        barcodes.drop(dups.index, inplace = True)

        dups_count = len(dups)
        dups_unique = list(dups.unique())
        print(f"Dropped {dups_count:,} REDCap records with duplicated barcodes: {dups_unique}", file = sys.stderr)

    redcap_data['qrcode'] = barcodes

    return redcap_data[['qrcode', 'pat_name', 'birth_date', 'contacted']]


def normalize_barcode(barcode):
    return barcode.str.upper().str.strip()


def trim_whitespace(df: pd.DataFrame) -> pd.DataFrame:
    """
    Trim leading and trailing whitespace from strings in *df*.
    """
    str_columns = df.select_dtypes("string").columns
    df[str_columns] = df[str_columns].apply(lambda column: column.str.strip())
    return df


def edit_status_code(scan_data: pd.DataFrame) -> pd.DataFrame:
    """
    Sets the *scan_data* status to `pending` if a test result is `positive` or
    `inconclusive` but the participant has not yet been contacted
    (`contacted` != 'yes').

    Returns the modified *scan_data*.
    """
    # Assume a null value for `contacted` means not contacted
    scan_data.loc[scan_data['contacted'].isnull(), 'contacted'] = 'no'

    is_positive = scan_data['status_code'] == 'positive'
    is_inconclusive = scan_data['status_code'] == 'inconclusive'

    participant_contacted = scan_data['contacted'] == 'yes'

    scan_data.loc[(is_positive | is_inconclusive) & ~(participant_contacted), 'status_code'] = 'pending'

    return scan_data


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Join a REDCAP export NDJSON file with a SCAN return of results ID3C export CSV file."
    )
    parser.add_argument("redcap_data", help="NDJSON export of SCAN records from REDCap")
    parser.add_argument("id3c_data", help="CSV export of SCAN return of results from ID3C")
    parser.add_argument("output", help="A destination for the output csv", nargs="?",
        default=sys.stdout)

    args = parser.parse_args()

    redcap_data = parse_redcap(args.redcap_data)

    id3c_data = pd.read_csv(args.id3c_data, dtype = 'string')
    id3c_data['qrcode'] = normalize_barcode(id3c_data['qrcode'])

    # Only keep records we can match from both REDCap and ID3C.  An incorrect
    # barcode in REDCap or the lack of a record in ID3C may cause records to
    # drop out in the join, but this is preferable to attaching results to an
    # incorrect barcode or not having a known status for a barcode.
    joined_data = redcap_data.merge(id3c_data, how='inner', on='qrcode')
    joined_data = edit_status_code(joined_data)

    joined_data[['qrcode', 'pat_name', 'birth_date', 'collect_ts', 'result_ts', 'status_code', 'swab_type', 'staff_observed']].to_csv(args.output, index=False)
